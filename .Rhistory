install.packages('dplyr', repos='http://cran.rstudio.com/')
install.packages('ggplot2', repos='http://cran.rstudio.com/')
install.packages('readr', repos='http://cran.rstudio.com/')
install.packages('stringr', repos='http://cran.rstudio.com/')
install.packages('lubridate', repos='http://cran.rstudio.com/')
install.packages('shiny', repos='http://cran.rstudio.com/')
install.packages('knitr', repos='http://cran.rstudio.com/')
install.packages('markdown', repos='http://cran.rstudio.com/')
install.packages('rmarkdown', repos='http://cran.rstudio.com/')
install.packages('e1071', repos='http://cran.rstudio.com/')
install.packages('coefplot', repos='http://cran.rstudio.com/')
install.packages('ISLR', repos='http://cran.rstudio.com/')
install.packages('nycflights13', repos='http://cran.rstudio.com/')
install.packages('ggthemes', repos='http://cran.rstudio.com/')
install.packages('corrplot', repos='http://cran.rstudio.com/')
install.packages('rpart.plot', repos='http://cran.rstudio.com/')
install.packages('GGally', repos='http://cran.rstudio.com/')
install.packages('caret', repos='http://cran.rstudio.com/')
install.packages('randomForest', repos='http://cran.rstudio.com/')
install.packages('MLmetrics', repos='http://cran.rstudio.com/')
install.packages('RSQLite', repos='http://cran.rstudio.com/')
install.packages('RXKCD', repos='http://cran.rstudio.com/')
install.packages("vcd", repos='http://cran.rstudio.com/')
install.packages("fueleconomy", repos='http://cran.rstudio.com/')
install.packages("rmarkdown", repos = "http://cran.rstudio.com/")
install.packages("knitr", repos = "http://cran.rstudio.com/")
install.packages("knitr", repos = "http://cran.rstudio.com/")
install.packages("rmarkdown", repos = "http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('chestpain_tree1.png')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)   # Group by analysis and other SQLish things.
library(ggplot2) # Plotting, of course
library(corrplot) # Correlation plots
library(caret)   # Many aspects of predictive modeling
library(skimr)  # An automated EDA tool
churn <- read.csv("./data/churn.csv")
str(churn)
summary(churn)
skim(churn)
churn$Geography <- as.factor(churn$Geography)
churn$Gender<- as.factor(churn$Gender)
churn$NumOfProducts <-  as.factor(churn$NumOfProducts)
churn$HasCrCard <-  as.factor(churn$HasCrCard)
churn$IsActiveMember <-  as.factor(churn$IsActiveMember)
churn$Exited <-  as.factor(churn$Exited)
# Simple partition into train (80%) and test (20%) set
set.seed(687) # Do NOT change this
trainIndex <- createDataPartition(churn$Exited, p = .8,
list = FALSE,
times = 1)
churn_train <- churn[as.vector(trainIndex), ]
churn_test <- churn[-as.vector(trainIndex), ]
n = churn %>% filter(Exited == "1") %>% nrow()
total =  churn %>% nrow()
n
n/total
total-n
(total-n)/total
ggplot(churn_train) + geom_histogram(aes(x = Age))
ggplot(churn_train) + geom_histogram(aes(x = Balance))
ggplot(churn_train) + geom_histogram(aes(x = EstimatedSalary))
ggplot(churn_train) + geom_histogram(aes(x = CreditScore))
ggplot(churn_train) + geom_point(aes(x= Age, y= CreditScore, color= Exited), alpha = .5)
ggplot(churn_train) + geom_point(aes(x= Age, y= EstimatedSalary, color= Exited), alpha= .5)
ggplot(churn_train) + geom_point(aes(x= Age, y= Balance, color= Exited), alpha= .5)
ggplot(churn_train) + geom_point(aes(x= Balance, y= EstimatedSalary, color= Exited, shape = Geography), alpha= .8)
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = CreditScore))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = EstimatedSalary))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Balance))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Age))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Tenure))
library(corrplot)
corrplot(cor(churn_train[ ,c("CreditScore","Balance","EstimatedSalary","Age", "Tenure")]))
# Create a vector of 0's
model_train_null <- rep(0, nrow(churn_train))
model_test_null <- rep(0, nrow(churn_test))
cm_train_null <- caret::confusionMatrix(as.factor(model_train_null), churn_train$Exited, positive = "1")
cm_train_null
cm_test_null <- caret::confusionMatrix(as.factor(model_test_null), churn_test$Exited, positive = "1")
cm_test_null
# Fit model to training data
model_lr1 <- glm(Exited ~.,
data=churn_train, family=binomial(link="logit"))
## Convert fitted model values to fitted classes. Use 0.5 as the
#  threshold for classifying a case as a 1.
class_train_lr1 <- as.factor((model_lr1$fitted.values > 0.5) * 1)
cm_train_lr1 <- confusionMatrix(class_train_lr1, as.factor(model_lr1$y), positive="1")
cm_train_lr1
pred_lr1 <- predict(model_lr1, newdata = churn_test, type = "response")
class_test_lr1 <- as.factor((pred_lr1 > .5) * 1)
cm_test_lr1 <- confusionMatrix(class_test_lr1, churn_test$Exited, positive="1")
cm_test_lr1
# Fit model to training data
model_lr1 <- glm(Exited ~.,
data=churn_train, family=binomial(link="logit"))
## Convert fitted model values to fitted classes. Use 0.5 as the
#  threshold for classifying a case as a 1.
class_train_lr1 <- as.factor((model_lr1$fitted.values > 0.4) * 1)
cm_train_lr1 <- confusionMatrix(class_train_lr1, as.factor(model_lr1$y), positive="1")
cm_train_lr1
model_tree1 <- rpart(Exited~ ., data=churn_train)
library(dplyr)   # Group by analysis and other SQLish things.
library(ggplot2) # Plotting, of course
library(corrplot) # Correlation plots
library(caret)   # Many aspects of predictive modeling
library(skimr)  # An automated EDA tool
library(rpart)
library(rpart.plot)
library(RColorBrewer)
model_tree1 <- rpart(Exited~ ., data=churn_train)
class_train_tree1 <- predict(model_tree1, type="class")
cm_train_tree1 <- confusionMatrix(class_train_tree1, churn_train$Exited, positive="1")
cm_train_tree1
rpart.plot(model_tree1)
pred_tree1 <- predict(model_tree1, newdata = churn_test, type = "class")
cm_test_tree1 <- confusionMatrix(pred_tree1, churn_test$Exited, positive="1")
cm_test_tree1
# Fit model to training data
model_lr1 <- glm(Exited ~.,
data=churn_train, family=binomial(link="logit"))
## Convert fitted model values to fitted classes. Use 0.5 as the
#  threshold for classifying a case as a 1.
class_train_lr1 <- as.factor((model_lr1$fitted.values > 0.5) * 1)
cm_train_lr1 <- confusionMatrix(class_train_lr1, as.factor(churn_train$Exited), positive="1")
cm_train_lr1
rf1_train <- randomForest(Exited ~ ., data = churn_train)
library(randomForest)
rf1_train <- randomForest(Exited ~ ., data = churn_train)
rf1_train
rf1_test <- predict(rf1_train, churn_test, type="class" )
rf1_test
rf_test <- predict(rf1_train, churn_test, type="class" )
rf.pred <- confusionMatrix(rf_test, churn_test$Exited, positive = "1")
rf_test <- predict(rf1_train, churn_test, type="class" )
rf.pred <- confusionMatrix(rf_test, churn_test$Exited, positive = "1")
rf.pred
library(randomForest)
rf1_train <- randomForest(Exited ~ ., data = churn_train)
#library(randomForest)
rf1_train <- randomForest(Exited ~ ., data = churn_train)
rf1_train
rf.train <- confusionMatrix(rf1_train, churn_train$Exited, positive = "1")
#library(randomForest)
rf1_train <- randomForest(Exited ~ ., data = churn_train)
rf1_train
rf.train <- confusionMatrix(rf1_train$predicted, churn_train$Exited, positive = "1")
rf.train
cm_train_lr1$overall
preformance <- data.frame(lr_test = cm_train_lr1$overall, cm_test_lr1$overall, cm_train_tree1$overall, cm_test_tree1$overall )
preformance <- data.frame(lr_train = cm_train_lr1$overall, lr_test = cm_test_lr1$overall, tree_train = cm_train_tree1$overall, tree_test = cm_test_tree1$overall, forest_train = rf.train$overall, forest_test = rf.test$overall )
preformance <- data.frame(lr_train = cm_train_lr1$overall, lr_test = cm_test_lr1$overall, tree_train = cm_train_tree1$overall, tree_test = cm_test_tree1$overall, forest_train = rf.train$overall, forest_test = rf.pred$overall )
preformance
performance <- data.frame(lr_train = cm_train_lr1$overall, lr_test = cm_test_lr1$overall, tree_train = cm_train_tree1$overall, tree_test = cm_test_tree1$overall, forest_train = rf.train$overall, forest_test = rf.pred$overall )
performance
cm_train_lr1$table
cm_train_lr1$mode
cm_train_lr1$byClass
performance <- data.frame(lr_train = cm_train_lr1$overall, lr_test = cm_test_lr1$overall, tree_train = cm_train_tree1$overall, tree_test = cm_test_tree1$overall, forest_train = rf.train$overall, forest_test = rf.pred$overall )
performance
performance2<- data.frame(lr_train = cm_train_lr1$byClass, lr_test = cm_test_lr1$byClass, tree_train = cm_train_tree1$byClass, tree_test = cm_test_tree1$byClass, forest_train = rf.train$byClass, forest_test = rf.pred$byClass )
performance2
#library(randomForest)
rf1_train <- randomForest(Exited ~ ., data = churn_train, importance = T)
rf1_train
rf.train <- confusionMatrix(rf1_train$predicted, churn_train$Exited, positive = "1")
rf.train
imp <- as.data.frame(rf1_train$importance) %>%
arrange(desc(MeanDecreaseGini))
imp <- as.data.frame(rf1_train$importance) %>%
arrange(desc(MeanDecreaseGini))
imp
imp <- as.data.frame(rf1_train$importance) %>%
arrange(desc(MeanDecreaseGini))
imp <- tibble::rownames_to_column(imp, "variable")
imp
imp <- as.data.frame(rf1_train$importance) %>%
arrange(desc(MeanDecreaseGini))
imp <- tibble::rownames_to_column(imp, "variable")
ggplot(data=imp) + geom_bar(aes(x=reorder(variable, MeanDecreaseAccuracy), y=MeanDecreaseAccuracy),
stat = "identity") + coord_flip()
imp <- as.data.frame(rf1_train$importance) %>%
arrange(desc(MeanDecreaseGini))
imp <- tibble::rownames_to_column(imp, "variable")
ggplot(data=imp) + geom_bar(aes(x=reorder(variable, MeanDecreaseAccuracy), y=MeanDecreaseAccuracy),
stat = "identity") + coord_flip()
rf1_train <- randomForest(Exited ~ NumOfProducts + Age + Balance + IsActiveMember + Geography, data = churn_train, mtry = 5, importance = T)
rf1_train
cm.rf.train2 <- confusionMatrix(rf1_train$predicted, churn_train$Exited, positive = "1")
cm.rf.train2
rf_test2 <- predict(rf1_train2, churn_test, type="class" )
rf_test2 <- predict(rf1_train, churn_test, type="class" )
rf.pred2 <- confusionMatrix(rf_test2, churn_test$Exited, positive = "1")
rf.pred2
cm.rf.train2 <- confusionMatrix(rf1_train2$predicted, churn_train$Exited, positive = "1")
rf1_train2 <- randomForest(Exited ~ NumOfProducts + Age + Balance + IsActiveMember + Geography, data = churn_train, mtry = 5)
rf1_train2
cm.rf.train2 <- confusionMatrix(rf1_train2$predicted, churn_train$Exited, positive = "1")
cm.rf.train2
rf_test2 <- predict(rf1_train2, churn_test, type="class" )
rf.pred2 <- confusionMatrix(rf_test2, churn_test$Exited, positive = "1")
rf.pred2
ggplot(churn_train) + geom_point(aes(x= Age, y= Balance, color= NumOfProducts), alpha= .5)
churn$NumOfProducts <-  as.numeric(churn$NumOfProducts)
# Simple partition into train (80%) and test (20%) set
set.seed(687) # Do NOT change this
trainIndex <- createDataPartition(churn$Exited, p = .8,
list = FALSE,
times = 1)
churn_train <- churn[as.vector(trainIndex), ]
churn_test <- churn[-as.vector(trainIndex), ]
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = NumofProducts))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = NumOfProducts))
ggplot(churn_train) + geom_violin(aes(x = Exited, y = NumOfProducts))
churn_train %>% filter(Exited == 1) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
churn_train %>% filter(Exited == 1) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
churn_train %>% filter(Exited == 0) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
ggplot(churn_train) + geom_histogram(aes(x = Age))
ggplot(churn_train) + geom_histogram(aes(x = Balance))
ggplot(churn_train) + geom_histogram(aes(x = EstimatedSalary))
ggplot(churn_train) + geom_histogram(aes(x = CreditScore))
churn_train %>% filter(Exited == 1) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
churn_train %>% filter(Exited == 0) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = CreditScore))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = EstimatedSalary))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Balance))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Age))
ggplot(churn_train) + geom_boxplot(aes(x = Exited, y = Tenure))
ggplot(churn_train) + geom_violin(aes(x = Exited, y = NumOfProducts))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)   # Group by analysis and other SQLish things.
library(ggplot2) # Plotting, of course
library(corrplot) # Correlation plots
library(caret)   # Many aspects of predictive modeling
library(skimr)  # An automated EDA tool
library(rpart)
library(rpart.plot)
library(RColorBrewer)
churn <- read.csv("./data/churn.csv")
str(churn)
summary(churn)
skim(churn)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)   # Group by analysis and other SQLish things.
library(ggplot2) # Plotting, of course
library(corrplot) # Correlation plots
library(caret)   # Many aspects of predictive modeling
library(skimr)  # An automated EDA tool
library(rpart)
library(rpart.plot)
library(RColorBrewer)
churn <- read.csv("./data/churn.csv")
str(churn)
summary(churn)
skim(churn)
churn$Geography <- as.factor(churn$Geography)
churn$Gender<- as.factor(churn$Gender)
churn$NumOfProducts <-  as.factor(churn$NumOfProducts)
churn$HasCrCard <-  as.factor(churn$HasCrCard)
churn$IsActiveMember <-  as.factor(churn$IsActiveMember)
churn$Exited <-  as.factor(churn$Exited)
# Simple partition into train (80%) and test (20%) set
set.seed(687) # Do NOT change this
trainIndex <- createDataPartition(churn$Exited, p = .8,
list = FALSE,
times = 1)
churn_train <- churn[as.vector(trainIndex), ]
churn_test <- churn[-as.vector(trainIndex), ]
n = churn %>% filter(Exited == "1") %>% nrow()
total =  churn %>% nrow()
n
n/total
total-n
(total-n)/total
ggplot(churn_train) + geom_histogram(aes(x = Age))
ggplot(churn_train) + geom_histogram(aes(x = Balance))
ggplot(churn_train) + geom_histogram(aes(x = EstimatedSalary))
ggplot(churn_train) + geom_histogram(aes(x = CreditScore))
churn_train %>% filter(Exited == 1) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)   # Group by analysis and other SQLish things.
library(ggplot2) # Plotting, of course
library(corrplot) # Correlation plots
library(caret)   # Many aspects of predictive modeling
library(skimr)  # An automated EDA tool
library(rpart)
library(rpart.plot)
library(RColorBrewer)
churn <- read.csv("./data/churn.csv")
str(churn)
summary(churn)
skim(churn)
churn$Geography <- as.factor(churn$Geography)
churn$Gender<- as.factor(churn$Gender)
churn$HasCrCard <-  as.factor(churn$HasCrCard)
churn$IsActiveMember <-  as.factor(churn$IsActiveMember)
churn$Exited <-  as.factor(churn$Exited)
# Simple partition into train (80%) and test (20%) set
set.seed(687) # Do NOT change this
trainIndex <- createDataPartition(churn$Exited, p = .8,
list = FALSE,
times = 1)
churn_train <- churn[as.vector(trainIndex), ]
churn_test <- churn[-as.vector(trainIndex), ]
ggplot(churn_train) + geom_histogram(aes(x = Age))
ggplot(churn_train) + geom_histogram(aes(x = Balance))
ggplot(churn_train) + geom_histogram(aes(x = EstimatedSalary))
ggplot(churn_train) + geom_histogram(aes(x = CreditScore))
churn_train %>% filter(Exited == 1) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
churn_train %>% filter(Exited == 0) %>% ggplot() + geom_histogram(aes(x=NumOfProducts))
setwd("~/Desktop/MIS5470_Supreme_Court_Decisions/MIS5470_Supreme_Court_Decisions")
cases = read.csv("cases_data.csv")
cases
install.packages(ggplo2)
library("ggplot2")
install.packages(ggplot2)
library("ggplot2")
install.packages('ggplot2')
library("ggplot2")
install.packages("ggplot2")
cases = read.csv("cases_data.csv")
library("ggplot2")
ggplot(cases) + geom_col(aes(x = issue_area))
ggplot(cases) + geom_bar(aes(x = issue_area))
ggplot(cases) + geom_bar(aes(x = issue_area, color = first_party_winner))
ggplot(cases) + geom_bar(aes(x = issue_area, fill = first_party_winner))
ggplot(cases) + geom_bar(aes(x = issue_area, fill = first_party_winner)) + theme(axis.text.x = element_text(angle = 90
ggplot(cases) + geom_bar(aes(x = issue_area, fill = first_party_winner)) + theme(axis.text.x = element_text(angle = 90))
library("ggplot2")
library(dplyr)
cases %>% group_by(issue_area)
cases %>% group_by(issue_area) %>% summarise(n = n)
cases %>% group_by(issue_area) %>% summarise(n = count)
cases %>% group_by(issue_area) %>% summarise(count = n)
cases %>% group_by(issue_area) %>% mutate(count = n)
cases %>% group_by(issue_area, first_party_winner)
cases %>% group_by(issue_area, first_party_winner) %>% summarise(n=n)
cases %>% dplyr::group_by(issue_area, first_party_winner) %>% dplyr::summarise(n=n)
cases %>% dplyr::group_by(issue_area, first_party_winner) %>% select(issue_area, first_party_winner) %>% head()
cases %>%
group_by(issue_area, first_party_winner) %>% select(issue_area, first_party_winner) %>% head()
cases %>%
group_by(issue_area, first_party_winner) %>% select(issue_area, first_party_winner)
cases %>%
group_by(issue_area, first_party_winner)
library("ggplot2")
library('dplyr')
cases %>%
group_by(issue_area, first_party_winner)
cases %>% group_by(issue_area)
cases %>% group_by(issue_area) %>% slice(1)
cases %>% group_by(issue_area) %>% summarize(total = n)
cases %>% group_by(issue_area, first_party_winner) %>% summarize(total = n)
cases %>% group_by(issue_area, first_party_winner) %>% dplyr::summarize(total = n)
cases %>% group_by(issue_area, first_party_winner) %>% dplyr::summarize(total = n, .groups = 'drop')
cases %>% group_by(issue_area, first_party_winner) %>% dplyr::summarize(total = n)
cases %>% group_by(issue_area, first_party_winner) %>% dplyr::summarize(total = n, .groups = issue_area)
library("ggplot2")
library('dplyr')
detach(package:plyr)
library("ggplot2")
library('dplyr')
detach(plyr)
library("ggplot2")
library('dplyr')
detach('plyr')
library("ggplot2")
library(dplyr)
cases %>% group_by(issue_area, first_party_winner) %>% summarize(total = n)
library("ggplot2")
library(plyr)
library(dplyr)
library("ggplot2")
#library(plyr)
library(dplyr)
cases %>% group_by(issue_area, first_party_winner) %>% summarize(total = n)
library("ggplot2")
library(plyr)
detach(dplyr)
library("ggplot2")
library(plyr)
detach(packages:dplyr)
library("ggplot2")
library(dplyr)
library("ggplot2")
library(dplyr)
cases = read.csv("cases_data.csv")
library("ggplot2")
library(dplyr)
cases %>% group_by(issue_area, first_party_winner) %>% summarize(total = n)
cases = read.csv("cases_data.csv")
ggplot(cases) + geom_bar(aes(x = issue_area, fill = first_party_winner)) + theme(axis.text.x = element_text(angle = 90))
cases %>% group_by(issue_area, first_party_winner) %>% summarize(total = n)
cases %>% group_by(issue_area, first_party_winner)
